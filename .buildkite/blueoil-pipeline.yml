steps:
  - command: "make build"
    label: "docker build in GPU agent"
    agents:
    - "agent-type=gpu"
    - "env=production"
    timeout_in_minutes: "30"
    env:
      BUILDKITE_CLEAN_CHECKOUT: 'true'
    concurrency: 1
    concurrency_group: "docker/gpu/${BUILDKITE_COMMIT}"
  - wait
  - command: "make test-classification"
    label: "classification"
    key: "classification"
    agents:
    - "agent-type=gpu"
    - "env=production"
    timeout_in_minutes: "30"
    env:
      BUILDKITE_CLEAN_CHECKOUT: 'true'
    artifact_paths:
    - "tmp/*/export/*/*/output/**/*.py"
    - "tmp/*/export/*/*/output/**/*.yaml"
    - "tmp/*/export/*/*/output/**/*.so"
    - "tmp/*/export/*/*/inference_test_data/raw_image.png"
  - command: "make test-object-detection"
    label: "object-detection"
    key: "object-detection"
    agents:
    - "agent-type=gpu"
    - "env=production"
    timeout_in_minutes: "40"
    env:
      BUILDKITE_CLEAN_CHECKOUT: 'true'
    artifact_paths:
    - "tmp/*/export/*/*/output/**/*.py"
    - "tmp/*/export/*/*/output/**/*.yaml"
    - "tmp/*/export/*/*/output/**/*.so"
    - "tmp/*/export/*/*/inference_test_data/raw_image.png"
  - command: "make test-semantic-segmentation"
    label: "semantic-segmentation"
    key: "semantic-segmentation"
    agents:
    - "agent-type=gpu"
    - "env=production"
    timeout_in_minutes: "30"
    env:
      BUILDKITE_CLEAN_CHECKOUT: 'true'
    artifact_paths:
    - "tmp/*/export/*/*/output/**/*.py"
    - "tmp/*/export/*/*/output/**/*.yaml"
    - "tmp/*/export/*/*/output/**/*.so"
    - "tmp/*/export/*/*/inference_test_data/raw_image.png"
  - command: "make test-keypoint-detection"
    label: "keypoint-detection"
    key: "keypoint-detection"
    agents:
    - "agent-type=gpu"
    - "env=production"
    timeout_in_minutes: "30"
    env:
      BUILDKITE_CLEAN_CHECKOUT: 'true'
    artifact_paths:
    - "tmp/*/export/*/*/output/**/*.py"
    - "tmp/*/export/*/*/output/**/*.yaml"
    - "tmp/*/export/*/*/output/**/*.so"
    - "tmp/*/export/*/*/inference_test_data/raw_image.png"
  - command: |
      buildkite-agent artifact download "tmp/*" ./ --build \${BUILDKITE_BUILD_ID} > /dev/null
      python3 -m venv blueoil_inference
      source blueoil_inference/bin/activate
      pip3 install -U pip
      pip3 install -r output_template/python/requirements.txt
      export CWD=\$(pwd)
      for TEST_CASE in \$(ls tmp/)
      do
        echo ####
        echo #### \${TEST_CASE}
        echo ####
        cd tmp/\${TEST_CASE}/export/*/*/output/python
        python3 run.py -i ../../inference_test_data/raw_image.png -c ../models/meta.yaml -m ../models/lib/libdlk_x86.so
        cd \${CWD}
      done
    label: "inference on ubuntu(x86)"
    depends_on:
    - "classification"
    - "object-detection"
    - "semantic-segmentation"
    - "keypoint-detection"
    agents:
    - "agent-type=normal"
    - "env=production"
    timeout_in_minutes: "30"
    env:
      BUILDKITE_CLEAN_CHECKOUT: 'true'
  - command: |
      buildkite-agent artifact download "tmp/*" ./ --build \${BUILDKITE_BUILD_ID} > /dev/null
      pip3 install -r output_template/python/requirements.txt
      export CWD=\$(pwd)
      for TEST_CASE in \$(ls tmp/)
      do
        echo ####
        echo #### \${TEST_CASE}
        echo ####
        cd tmp/\${TEST_CASE}/export/*/*/output/python
        python3 run.py -i ../../inference_test_data/raw_image.png -c ../models/meta.yaml -m ../models/lib/libdlk_aarch64.so
        cd \${CWD}
      done
    label: "inference on raspberry-pi(aarch64)"
    depends_on:
    - "classification"
    - "object-detection"
    - "semantic-segmentation"
    - "keypoint-detection"
    agents:
    - "agent-type=raspberry-pi"
    - "env=benchmark"
    timeout_in_minutes: "30"
    env:
      BUILDKITE_CLEAN_CHECKOUT: 'true'
  - command: |
      buildkite-agent artifact download "tmp/*" ./ --build \${BUILDKITE_BUILD_ID} > /dev/null
      sudo pip install -r output_template/python/requirements.txt --no-cache-dir
      export CWD=\$(pwd)
      for TEST_CASE in \$(ls tmp/)
      do
        echo ####
        echo #### \${TEST_CASE}
        echo ####
        cd tmp/\${TEST_CASE}/export/*/*/output/python
        python run.py -i ../../inference_test_data/raw_image.png -c ../models/meta.yaml -m ../models/lib/libdlk_arm.so	
        cd \${CWD}
      done
    label: "inference on de10nano(arm)"
    depends_on:
    - "classification"
    - "object-detection"
    - "semantic-segmentation"
    - "keypoint-detection"
    agents:
    - "agent-type=de10nano"
    - "env=benchmark"
    timeout_in_minutes: "30"
    env:
      BUILDKITE_CLEAN_CHECKOUT: 'true'
